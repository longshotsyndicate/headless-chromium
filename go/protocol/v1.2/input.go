package protocol

import (
	hc "github.com/longshotsyndicate/headless-chromium/go"
	"sync"
)

// @experimental
type TouchPoint struct {
	State         string  `json:"state"`                   // State of the touch point.
	X             int     `json:"x"`                       // X coordinate of the event relative to the main frame's viewport.
	Y             int     `json:"y"`                       // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	RadiusX       int     `json:"radiusX,omitempty"`       // X radius of the touch area (default: 1).
	RadiusY       int     `json:"radiusY,omitempty"`       // Y radius of the touch area (default: 1).
	RotationAngle float64 `json:"rotationAngle,omitempty"` // Rotation angle (default: 0.0).
	Force         float64 `json:"force,omitempty"`         // Force (default: 1.0).
	Id            float64 `json:"id,omitempty"`            // Identifier used to track touch sources between events, must be unique within an event.
}

// @experimental
type GestureSourceType string

const GestureSourceTypeDefault GestureSourceType = "default"
const GestureSourceTypeTouch GestureSourceType = "touch"
const GestureSourceTypeMouse GestureSourceType = "mouse"

type DispatchKeyEventParams struct {
	Type                  string  `json:"type"`                            // Type of the key event.
	Modifiers             int     `json:"modifiers,omitempty"`             // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp             float64 `json:"timestamp,omitempty"`             // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Text                  string  `json:"text,omitempty"`                  // Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
	UnmodifiedText        string  `json:"unmodifiedText,omitempty"`        // Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
	KeyIdentifier         string  `json:"keyIdentifier,omitempty"`         // Unique key identifier (e.g., 'U+0041') (default: "").
	Code                  string  `json:"code,omitempty"`                  // Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Key                   string  `json:"key,omitempty"`                   // Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	WindowsVirtualKeyCode int     `json:"windowsVirtualKeyCode,omitempty"` // Windows virtual key code (default: 0).
	NativeVirtualKeyCode  int     `json:"nativeVirtualKeyCode,omitempty"`  // Native virtual key code (default: 0).
	AutoRepeat            bool    `json:"autoRepeat,omitempty"`            // Whether the event was generated from auto repeat (default: false).
	IsKeypad              bool    `json:"isKeypad,omitempty"`              // Whether the event was generated from the keypad (default: false).
	IsSystemKey           bool    `json:"isSystemKey,omitempty"`           // Whether the event was a system key event (default: false).
}

// Dispatches a key event to the page.

type DispatchKeyEventCommand struct {
	params *DispatchKeyEventParams
	wg     sync.WaitGroup
	err    error
}

func NewDispatchKeyEventCommand(params *DispatchKeyEventParams) *DispatchKeyEventCommand {
	return &DispatchKeyEventCommand{
		params: params,
	}
}

func (cmd *DispatchKeyEventCommand) Name() string {
	return "Input.dispatchKeyEvent"
}

func (cmd *DispatchKeyEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchKeyEventCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func DispatchKeyEvent(params *DispatchKeyEventParams, conn *hc.Conn) (err error) {
	cmd := NewDispatchKeyEventCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type DispatchKeyEventCB func(err error)

// Dispatches a key event to the page.

type AsyncDispatchKeyEventCommand struct {
	params *DispatchKeyEventParams
	cb     DispatchKeyEventCB
}

func NewAsyncDispatchKeyEventCommand(params *DispatchKeyEventParams, cb DispatchKeyEventCB) *AsyncDispatchKeyEventCommand {
	return &AsyncDispatchKeyEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncDispatchKeyEventCommand) Name() string {
	return "Input.dispatchKeyEvent"
}

func (cmd *AsyncDispatchKeyEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchKeyEventCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncDispatchKeyEventCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type DispatchMouseEventParams struct {
	Type       string  `json:"type"`                 // Type of the mouse event.
	X          int     `json:"x"`                    // X coordinate of the event relative to the main frame's viewport.
	Y          int     `json:"y"`                    // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Modifiers  int     `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp  float64 `json:"timestamp,omitempty"`  // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Button     string  `json:"button,omitempty"`     // Mouse button (default: "none").
	ClickCount int     `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// Dispatches a mouse event to the page.

type DispatchMouseEventCommand struct {
	params *DispatchMouseEventParams
	wg     sync.WaitGroup
	err    error
}

func NewDispatchMouseEventCommand(params *DispatchMouseEventParams) *DispatchMouseEventCommand {
	return &DispatchMouseEventCommand{
		params: params,
	}
}

func (cmd *DispatchMouseEventCommand) Name() string {
	return "Input.dispatchMouseEvent"
}

func (cmd *DispatchMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchMouseEventCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func DispatchMouseEvent(params *DispatchMouseEventParams, conn *hc.Conn) (err error) {
	cmd := NewDispatchMouseEventCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type DispatchMouseEventCB func(err error)

// Dispatches a mouse event to the page.

type AsyncDispatchMouseEventCommand struct {
	params *DispatchMouseEventParams
	cb     DispatchMouseEventCB
}

func NewAsyncDispatchMouseEventCommand(params *DispatchMouseEventParams, cb DispatchMouseEventCB) *AsyncDispatchMouseEventCommand {
	return &AsyncDispatchMouseEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncDispatchMouseEventCommand) Name() string {
	return "Input.dispatchMouseEvent"
}

func (cmd *AsyncDispatchMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchMouseEventCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncDispatchMouseEventCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type DispatchTouchEventParams struct {
	Type        string        `json:"type"`                // Type of the touch event.
	TouchPoints []*TouchPoint `json:"touchPoints"`         // Touch points.
	Modifiers   int           `json:"modifiers,omitempty"` // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp   float64       `json:"timestamp,omitempty"` // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
}

// Dispatches a touch event to the page.
// @experimental
type DispatchTouchEventCommand struct {
	params *DispatchTouchEventParams
	wg     sync.WaitGroup
	err    error
}

func NewDispatchTouchEventCommand(params *DispatchTouchEventParams) *DispatchTouchEventCommand {
	return &DispatchTouchEventCommand{
		params: params,
	}
}

func (cmd *DispatchTouchEventCommand) Name() string {
	return "Input.dispatchTouchEvent"
}

func (cmd *DispatchTouchEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchTouchEventCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func DispatchTouchEvent(params *DispatchTouchEventParams, conn *hc.Conn) (err error) {
	cmd := NewDispatchTouchEventCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type DispatchTouchEventCB func(err error)

// Dispatches a touch event to the page.
// @experimental
type AsyncDispatchTouchEventCommand struct {
	params *DispatchTouchEventParams
	cb     DispatchTouchEventCB
}

func NewAsyncDispatchTouchEventCommand(params *DispatchTouchEventParams, cb DispatchTouchEventCB) *AsyncDispatchTouchEventCommand {
	return &AsyncDispatchTouchEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncDispatchTouchEventCommand) Name() string {
	return "Input.dispatchTouchEvent"
}

func (cmd *AsyncDispatchTouchEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchTouchEventCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncDispatchTouchEventCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type EmulateTouchFromMouseEventParams struct {
	Type       string  `json:"type"`                 // Type of the mouse event.
	X          int     `json:"x"`                    // X coordinate of the mouse pointer in DIP.
	Y          int     `json:"y"`                    // Y coordinate of the mouse pointer in DIP.
	Timestamp  float64 `json:"timestamp"`            // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
	Button     string  `json:"button"`               // Mouse button.
	DeltaX     float64 `json:"deltaX,omitempty"`     // X delta in DIP for mouse wheel event (default: 0).
	DeltaY     float64 `json:"deltaY,omitempty"`     // Y delta in DIP for mouse wheel event (default: 0).
	Modifiers  int     `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	ClickCount int     `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// Emulates touch event from the mouse event parameters.
// @experimental
type EmulateTouchFromMouseEventCommand struct {
	params *EmulateTouchFromMouseEventParams
	wg     sync.WaitGroup
	err    error
}

func NewEmulateTouchFromMouseEventCommand(params *EmulateTouchFromMouseEventParams) *EmulateTouchFromMouseEventCommand {
	return &EmulateTouchFromMouseEventCommand{
		params: params,
	}
}

func (cmd *EmulateTouchFromMouseEventCommand) Name() string {
	return "Input.emulateTouchFromMouseEvent"
}

func (cmd *EmulateTouchFromMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *EmulateTouchFromMouseEventCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func EmulateTouchFromMouseEvent(params *EmulateTouchFromMouseEventParams, conn *hc.Conn) (err error) {
	cmd := NewEmulateTouchFromMouseEventCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type EmulateTouchFromMouseEventCB func(err error)

// Emulates touch event from the mouse event parameters.
// @experimental
type AsyncEmulateTouchFromMouseEventCommand struct {
	params *EmulateTouchFromMouseEventParams
	cb     EmulateTouchFromMouseEventCB
}

func NewAsyncEmulateTouchFromMouseEventCommand(params *EmulateTouchFromMouseEventParams, cb EmulateTouchFromMouseEventCB) *AsyncEmulateTouchFromMouseEventCommand {
	return &AsyncEmulateTouchFromMouseEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncEmulateTouchFromMouseEventCommand) Name() string {
	return "Input.emulateTouchFromMouseEvent"
}

func (cmd *AsyncEmulateTouchFromMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *EmulateTouchFromMouseEventCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncEmulateTouchFromMouseEventCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type SynthesizePinchGestureParams struct {
	X                 int               `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int               `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	ScaleFactor       float64           `json:"scaleFactor"`                 // Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	RelativeSpeed     int               `json:"relativeSpeed,omitempty"`     // Relative pointer speed in pixels per second (default: 800).
	GestureSourceType GestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
// @experimental
type SynthesizePinchGestureCommand struct {
	params *SynthesizePinchGestureParams
	wg     sync.WaitGroup
	err    error
}

func NewSynthesizePinchGestureCommand(params *SynthesizePinchGestureParams) *SynthesizePinchGestureCommand {
	return &SynthesizePinchGestureCommand{
		params: params,
	}
}

func (cmd *SynthesizePinchGestureCommand) Name() string {
	return "Input.synthesizePinchGesture"
}

func (cmd *SynthesizePinchGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizePinchGestureCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func SynthesizePinchGesture(params *SynthesizePinchGestureParams, conn *hc.Conn) (err error) {
	cmd := NewSynthesizePinchGestureCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type SynthesizePinchGestureCB func(err error)

// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
// @experimental
type AsyncSynthesizePinchGestureCommand struct {
	params *SynthesizePinchGestureParams
	cb     SynthesizePinchGestureCB
}

func NewAsyncSynthesizePinchGestureCommand(params *SynthesizePinchGestureParams, cb SynthesizePinchGestureCB) *AsyncSynthesizePinchGestureCommand {
	return &AsyncSynthesizePinchGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncSynthesizePinchGestureCommand) Name() string {
	return "Input.synthesizePinchGesture"
}

func (cmd *AsyncSynthesizePinchGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizePinchGestureCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncSynthesizePinchGestureCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type SynthesizeScrollGestureParams struct {
	X                     int               `json:"x"`                               // X coordinate of the start of the gesture in CSS pixels.
	Y                     int               `json:"y"`                               // Y coordinate of the start of the gesture in CSS pixels.
	XDistance             int               `json:"xDistance,omitempty"`             // The distance to scroll along the X axis (positive to scroll left).
	YDistance             int               `json:"yDistance,omitempty"`             // The distance to scroll along the Y axis (positive to scroll up).
	XOverscroll           int               `json:"xOverscroll,omitempty"`           // The number of additional pixels to scroll back along the X axis, in addition to the given distance.
	YOverscroll           int               `json:"yOverscroll,omitempty"`           // The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
	PreventFling          bool              `json:"preventFling,omitempty"`          // Prevent fling (default: true).
	Speed                 int               `json:"speed,omitempty"`                 // Swipe speed in pixels per second (default: 800).
	GestureSourceType     GestureSourceType `json:"gestureSourceType,omitempty"`     // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
	RepeatCount           int               `json:"repeatCount,omitempty"`           // The number of times to repeat the gesture (default: 0).
	RepeatDelayMs         int               `json:"repeatDelayMs,omitempty"`         // The number of milliseconds delay between each repeat. (default: 250).
	InteractionMarkerName string            `json:"interactionMarkerName,omitempty"` // The name of the interaction markers to generate, if not empty (default: "").
}

// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
// @experimental
type SynthesizeScrollGestureCommand struct {
	params *SynthesizeScrollGestureParams
	wg     sync.WaitGroup
	err    error
}

func NewSynthesizeScrollGestureCommand(params *SynthesizeScrollGestureParams) *SynthesizeScrollGestureCommand {
	return &SynthesizeScrollGestureCommand{
		params: params,
	}
}

func (cmd *SynthesizeScrollGestureCommand) Name() string {
	return "Input.synthesizeScrollGesture"
}

func (cmd *SynthesizeScrollGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeScrollGestureCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func SynthesizeScrollGesture(params *SynthesizeScrollGestureParams, conn *hc.Conn) (err error) {
	cmd := NewSynthesizeScrollGestureCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type SynthesizeScrollGestureCB func(err error)

// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
// @experimental
type AsyncSynthesizeScrollGestureCommand struct {
	params *SynthesizeScrollGestureParams
	cb     SynthesizeScrollGestureCB
}

func NewAsyncSynthesizeScrollGestureCommand(params *SynthesizeScrollGestureParams, cb SynthesizeScrollGestureCB) *AsyncSynthesizeScrollGestureCommand {
	return &AsyncSynthesizeScrollGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncSynthesizeScrollGestureCommand) Name() string {
	return "Input.synthesizeScrollGesture"
}

func (cmd *AsyncSynthesizeScrollGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeScrollGestureCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncSynthesizeScrollGestureCommand) Done(data []byte, err error) {
	cmd.cb(err)
}

type SynthesizeTapGestureParams struct {
	X                 int               `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int               `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	Duration          int               `json:"duration,omitempty"`          // Duration between touchdown and touchup events in ms (default: 50).
	TapCount          int               `json:"tapCount,omitempty"`          // Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	GestureSourceType GestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
// @experimental
type SynthesizeTapGestureCommand struct {
	params *SynthesizeTapGestureParams
	wg     sync.WaitGroup
	err    error
}

func NewSynthesizeTapGestureCommand(params *SynthesizeTapGestureParams) *SynthesizeTapGestureCommand {
	return &SynthesizeTapGestureCommand{
		params: params,
	}
}

func (cmd *SynthesizeTapGestureCommand) Name() string {
	return "Input.synthesizeTapGesture"
}

func (cmd *SynthesizeTapGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeTapGestureCommand) Run(conn *hc.Conn) error {
	cmd.wg.Add(1)
	conn.SendCommand(cmd)
	cmd.wg.Wait()
	return cmd.err
}

func SynthesizeTapGesture(params *SynthesizeTapGestureParams, conn *hc.Conn) (err error) {
	cmd := NewSynthesizeTapGestureCommand(params)
	cmd.Run(conn)
	return cmd.err
}

type SynthesizeTapGestureCB func(err error)

// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
// @experimental
type AsyncSynthesizeTapGestureCommand struct {
	params *SynthesizeTapGestureParams
	cb     SynthesizeTapGestureCB
}

func NewAsyncSynthesizeTapGestureCommand(params *SynthesizeTapGestureParams, cb SynthesizeTapGestureCB) *AsyncSynthesizeTapGestureCommand {
	return &AsyncSynthesizeTapGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *AsyncSynthesizeTapGestureCommand) Name() string {
	return "Input.synthesizeTapGesture"
}

func (cmd *AsyncSynthesizeTapGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeTapGestureCommand) Done(data []byte, err error) {
	cmd.err = err
	cmd.wg.Done()
}

func (cmd *AsyncSynthesizeTapGestureCommand) Done(data []byte, err error) {
	cmd.cb(err)
}
